{
  "_args": [
    [
      {
        "raw": "bounce@1.x.x",
        "scope": null,
        "escapedName": "bounce",
        "name": "bounce",
        "rawSpec": "1.x.x",
        "spec": ">=1.0.0 <2.0.0",
        "type": "range"
      },
      "/Users/jbravo/Dropbox/DesarrollosPropios/DragonMint/web-react/dragon-react/node_modules/sntp"
    ]
  ],
  "_from": "bounce@>=1.0.0 <2.0.0",
  "_id": "bounce@1.2.0",
  "_inCache": true,
  "_location": "/bounce",
  "_nodeVersion": "8.9.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/bounce-1.2.0.tgz_1509961001524_0.1863099925685674"
  },
  "_npmUser": {
    "name": "hueniverse",
    "email": "eran@hammer.io"
  },
  "_npmVersion": "5.5.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "bounce@1.x.x",
    "scope": null,
    "escapedName": "bounce",
    "name": "bounce",
    "rawSpec": "1.x.x",
    "spec": ">=1.0.0 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/sntp"
  ],
  "_resolved": "https://registry.npmjs.org/bounce/-/bounce-1.2.0.tgz",
  "_shasum": "e3bac68c73fd256e38096551efc09f504873c8c8",
  "_shrinkwrap": null,
  "_spec": "bounce@1.x.x",
  "_where": "/Users/jbravo/Dropbox/DesarrollosPropios/DragonMint/web-react/dragon-react/node_modules/sntp",
  "bugs": {
    "url": "https://github.com/hapijs/bounce/issues"
  },
  "dependencies": {
    "boom": "7.x.x",
    "hoek": "5.x.x"
  },
  "description": "Selective error catching and rewrite rules",
  "devDependencies": {
    "code": "5.x.x",
    "lab": "15.x.x"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-8syCGe8B2/WC53118/F/tFy5aW00j+eaGPXmAUP7iBhxc+EBZZxS1vKelWyBCH6IqojgS2t1gF0glH30qAJKEw==",
    "shasum": "e3bac68c73fd256e38096551efc09f504873c8c8",
    "tarball": "https://registry.npmjs.org/bounce/-/bounce-1.2.0.tgz"
  },
  "engines": {
    "node": ">=8.9.0"
  },
  "gitHead": "dce0a1bba1400d8d4397bb1887d567106da699d7",
  "homepage": "https://github.com/hapijs/bounce#readme",
  "keywords": [
    "error",
    "catch"
  ],
  "license": "BSD-3-Clause",
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "hueniverse",
      "email": "eran@hammer.io"
    }
  ],
  "name": "bounce",
  "optionalDependencies": {},
  "readme": "# bounce\n\nSelective error catching and rewrite rules\n\n[![Build Status](https://secure.travis-ci.org/hapijs/bounce.svg)](http://travis-ci.org/hapijs/bounce)\n\nLead Maintainer - [Eran Hammer](https://github.com/hueniverse)\n\n## Introduction\n\nWorking with `async`/`await` introduces a new challange in handling errors. Unlike callbacks, which\nprovide a dual machanism for passing application errors via the callback `err` argument and\ndeveloper errors via exceptions, `await` combines these two channels into one.\n\nIt is common practice to ignore application errors in background processing or when there is no\nuseful fallback. In those cases, it is still imperative to allow developer errors to surface and\nnot get swallowed.\n\nFor more information read:\n- [Learning to Throw Again](https://medium.com/@eranhammer/learning-to-throw-again-79b498504d28)\n- [Catching without Awaiting](https://medium.com/@eranhammer/catching-without-awaiting-b2cb7df45790)\n\nFor example:\n\n```js\nasync function email(user) {\n\n    if (!user.address) {\n        throw new Error('User has no email address');\n    }\n\n    const message = 'Welcome!';\n    if (user.name) {\n        message = `Welcome ${user.name}!`;\n    }\n\n    await mailer.send(user.address, message);\n}\n\nasync function register(address, name) {\n\n    const user = { address, name };\n    const id = await db.user.insert(user);\n    user.id = id;\n\n    try {\n        await email(user);\n    }\n    catch (err) { }             // Ignore errors\n\n    return user;\n}\n```\n\nThis will fail silently every time the user has a `name` because it is reassigning a value to a\n`const` variable. However, because `email()` errors are ignored, system errors are ignored as well.\nThe idea is that `email()` can be used in both critical and non-critical paths. In the critical\npaths, errors are checked and addressed, but in the non-critical paths, errors are simply ignored.\n\nThis can be solved by adding a `rethrow()` statement:\n\n```js\nconst Bounce = require('bounce');\n\nasync function register(address, name) {\n\n    const user = { address, name };\n    const id = await db.user.insert(user);\n    user.id = id;\n\n    try {\n        await email(user);\n    }\n    catch (err) {\n        Bounce.rethrow(err, 'system');  // Rethrows system errors and ignores application errors\n    }\n\n    return user;\n}\n```\n\n## Usage\n\n### `rethrow(err, types, [options])`\n\nThrows the error passed if it matches any of the specified rules where:\n- `err` - the error.\n- `type` - a single item or an array of items of:\n    - An error constructor (e.g. `SyntaxError`).\n    - `'system'` - matches any languange native error or node assertions.\n    - `'boom'` - matches [**boom**](https://github.com/hapijs/boom) errors.\n    - an object where each property is compared with the error and must match the error property\n      value. All the properties in the object must match the error but do not need to include all\n      the error properties.\n- `options` - optional object where:\n    - `decorate` - an object which is assigned to the `err`, copying the properties onto the error.\n    - `override` - an error used to override `err` when `err` matches. If used with `decorate`,\n      the `override` object is modified.\n    - `return` - if `true`, the error is returned instead of thrown. Defaults to `false`.\n\n### `ignore(err, types, [options])`\n\nThe opposite action of `rethrow()`. Ignores any errors matching the specified `types`. Any error\nnot matching is thrown after applying the `options`.\n\n### `background(operation, [action], [types], [options])`\n\nAwaits for the value to resolve in the background and then apply either the `rethrow()` or `ignore()`\nactions where:\n- `operation` - a function, promise, or value that is `await`ed on inside a `try...catch` and any\n  error thrown processed by the `action` rule.\n- `action` - one of `'rethrow'` or `'ignore'`. Defaults to `'rethrow'`.\n- `types` - same as the `types` argument passed to `rethrow()` or `ignore()`. Defaults to `'system'`.\n- `options` - same as the `options` argument passed to `rethrow()` or `ignore()`.\n\n### `isBoom(err)`\n\nReturns `true` when `err` is a [**boom**](https://github.com/hapijs/boom) error.\n\n### `isError(err)`\n\nReturns `true` when `err` is an error.\n\n### `isSystem(err)`\n\nReturn `true` when `err` is one of:\n- `EvalError`\n- `RangeError`\n- `ReferenceError`\n- `SyntaxError`\n- `TypeError`\n- `URIError`\n- Node's `AssertionError`\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/hapijs/bounce.git"
  },
  "scripts": {
    "test": "lab -a code -t 100 -L",
    "test-cov-html": "lab -a code -r html -o coverage.html -L"
  },
  "version": "1.2.0"
}
